/**
 * Charon platform standard bindings and definitions (Such as macros and
 * function references).
 */
import { dataPlace as _, DataKind } from './CompilerExtras';

export const stdlib = {
  'def': _({ name: '#def', kind: DataKind.MACRO_FUNC }),
  'def-impure': _({ name: '#def-impure', kind: DataKind.MACRO_FUNC }),
  'let': _({ name: '#let', kind: DataKind.MACRO_FUNC }),
  'apply': _({ name: '#apply', kind: DataKind.MACRO_FUNC }),
  'if': _({ name: '#if', kind: DataKind.MACRO_FUNC }),
  'try': _({ name: '#try', kind: DataKind.MACRO_FUNC }),
  'catch': _({ name: '#catch', kind: DataKind.MACRO_FUNC }),
  'do': _({ name: '#do', kind: DataKind.MACRO_FUNC }),
  'fn': _({ name: '#fn', kind: DataKind.MACRO_FUNC }),
  '...': _({ name: '#three-dots', kind: DataKind.MACRO_FUNC }),
  '+': _({ name: '#plus', kind: DataKind.MACRO_FUNC }),
  '-': _({ name: '#minus', kind: DataKind.MACRO_FUNC }),
  '/': _({ name: '#div', kind: DataKind.MACRO_FUNC }),
  '*': _({ name: '#mul', kind: DataKind.MACRO_FUNC }),
  '^': _({ name: '#pow', kind: DataKind.MACRO_FUNC }),
  '=': _({ name: '#eq', kind: DataKind.MACRO_FUNC }),
  '<>': _({ name: '#neq', kind: DataKind.MACRO_FUNC }),
  '>': _({ name: '#gt', kind: DataKind.MACRO_FUNC }),
  '<': _({ name: '#lt', kind: DataKind.MACRO_FUNC }),
  '>=': _({ name: '#gteq', kind: DataKind.MACRO_FUNC }),
  '<=': _({ name: '#lteq', kind: DataKind.MACRO_FUNC }),
  'and': _({ name: '#and', kind: DataKind.MACRO_FUNC }),
  'or': _({ name: '#or', kind: DataKind.MACRO_FUNC }),
  'not': _({ name: '#not', kind: DataKind.MACRO_FUNC }),
  'nand': _({ name: '#nand', kind: DataKind.MACRO_FUNC }),
  'nor': _({ name: '#nor', kind: DataKind.MACRO_FUNC }),
  'xor': _({ name: '#xor', kind: DataKind.MACRO_FUNC }),
  '->': _({ name: '#thread-first', kind: DataKind.MACRO_FUNC }),
  '<-': _({ name: '#thread-last', kind: DataKind.MACRO_FUNC }),
  'str': _({ name: '#string', kind: DataKind.MACRO_FUNC }),
  'import': _({ name: '#import', kind: DataKind.MACRO_FUNC }),
  'def-value': _({ name: '#def-value', kind: DataKind.MACRO_FUNC }),
  'def-extern': _({ name: '#def-extern', kind: DataKind.MACRO_FUNC }),
  'unit': _({ name: 'charon.Unit', kind: DataKind.LOCAL }),
  'true': _({ name: 'charon.True', kind: DataKind.LOCAL }),
  'false': _({ name: 'charon.False', kind: DataKind.LOCAL }),
  'some?': _({ name: 'charon.some', kind: DataKind.FUNC }),
  'vector/map': _({ name: 'charon.vector_map', kind: DataKind.FUNC }),
  'vector/each': _({ name: 'charon.vector_each', kind: DataKind.FUNC }),
  'table/get': _({ name: 'charon.table_get' }),
  'table/set': _({ name: 'charon.table_set' }),
  'object/get': _({ name: 'charon.object_get' }),
  'object/set': _({ name: 'charon.object_set' }),
  'atom': _({ name: 'charon.atom' }),
  'atom/set!': _({ name: 'charon.atom_set', kind: DataKind.IMPURE_FUNC }),
  'atom/get': _({ name: 'charon.atom_get', kind: DataKind.IMPURE_FUNC }),
  'opaque-call': _({ name: 'charon.opaque_call' }),
  'call': _({ name: 'charon.call' }),
  'println': _({ name: 'charon.println', kind: DataKind.IMPURE_FUNC }),
  'print': _({ name: 'charon.print', kind: DataKind.IMPURE_FUNC }),
  'file/open': _({ name: 'charon.file_open', kind: DataKind.IMPURE_FUNC }),
  'file/close': _({ name: 'charon.file_close', kind: DataKind.IMPURE_FUNC }),
  'file/write': _({ name: 'charon.file_write', kind: DataKind.IMPURE_FUNC }),
  'file/read': _({ name: 'charon.file_read', kind: DataKind.IMPURE_FUNC }),
  // Well known Lua platform pure functions.
  'string/find': _({ name: 'string.find', kind: DataKind.FUNC }),
} as const;
