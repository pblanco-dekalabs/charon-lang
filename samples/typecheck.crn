;;;
; MIT License
;
; Copyright (c) 2020 Pablo Blanco Celdr√°n
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.
;;;

;;;
; Simple type checking
;;;

; Define some values
(def my-str "Hello world!")
(def my-number 5493.34)
(def my-table { :hello "World" })
(def my-list [1 2 3 4])
(def my-bool true)
(def my-symbol :some-symbol)
(def my-atom (atom "Yeah kinda"))

; Type assertion for string
(assert
  (string? my-str) "Expected string")

; Type assertion for number
(assert
  (number? my-number) "Expected number")

; Type assertion for table
(assert
  (table? my-table) "Expected table")

; Type assertion for list
(assert
  (list? my-list) "Expected list")

; Type assertion for boolean
(assert
  (boolean? my-bool) "Expected boolean")

; Type assertion for symbol
(assert
  (symbol? my-symbol) "Expected symbol")

; Type assertion for atom
(assert
  (atom? my-atom) "Expected atom")
